name: build

trigger:
  tags:
    include: ["*"]
pr: none

pool:
  vmImage: 'ubuntu-20.04'

stages:
- stage: build
  jobs:
  - job: build_package
    displayName: Build Package
    steps:
    - task: UsePythonVersion@0
      displayName: Set python version
      inputs: {versionSpec: 3.8}
    - script: |
        sudo env "PATH=$PATH" python -m pip install --no-cache-dir -U wheel pip build
        export TAG=${BUILD_SOURCEBRANCH#"refs/tags/"}
        echo -n ${TAG} > VERSION.txt
        python -m build
    - publish: $(System.DefaultWorkingDirectory)/dist/
      artifact: dist
- stage: deploy
  jobs:
  - job: deploy
    displayName: Deploy packages and containers
    variables:
      - group: deployment-information
    steps:
    - download: current
      artifact: dist
      # Make sure a usable version of python is used for the deployment
    - task: UsePythonVersion@0
      displayName: Set python version
      inputs:
        versionSpec: '3.8'
    - script: |
        set -xv  # Echo commands before they are run
        sudo env "PATH=$PATH" python -m pip install --no-cache-dir -U twine
        ls dist
        python -m twine upload --skip-existing --repository-url $TEST_REPOSITORY_URL dist/*
      workingDirectory: $(Pipeline.Workspace)
      displayName: Deploy to Test PyPI
      env:
        TWINE_USERNAME: $(twineUsername)
        TWINE_PASSWORD: $(twinePassword)
    - script: |
        set -xv  # Echo commands before they are run
        sudo env "PATH=$PATH" python -m pip install --no-cache-dir -U twine
        ls dist
        python -m twine upload --skip-existing dist/*
      workingDirectory: $(Pipeline.Workspace)
      displayName: Deploy to PyPI
      env:
        TWINE_USERNAME: $(twineUsername)
        TWINE_PASSWORD: $(twinePassword)
